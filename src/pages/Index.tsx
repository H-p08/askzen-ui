
import { useState } from "react";
import Header from "@/components/Header";
import SubjectTabs from "@/components/SubjectTabs";
import SearchArea from "@/components/SearchArea";
import AnswerDisplay from "@/components/AnswerDisplay";
import Footer from "@/components/Footer";
import { useToast } from "@/hooks/use-toast";
import { enhancedAIService } from "@/services/enhancedAIService";

const Index = () => {
  const [selectedSubject, setSelectedSubject] = useState("math");
  const [currentAnswer, setCurrentAnswer] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [lastQuery, setLastQuery] = useState<string>("");
  const [currentMetadata, setCurrentMetadata] = useState<any>(null);
  const { toast } = useToast();

  console.log("Enhanced Index component rendered with:", {
    selectedSubject,
    currentAnswer: currentAnswer ? `${currentAnswer.substring(0, 50)}...` : null,
    isLoading
  });

  const handleSearch = async (query: string) => {
    console.log("handleSearch called with enhanced AI:", query);
    
    setIsLoading(true);
    setLastQuery(query);
    setCurrentAnswer(null);
    setCurrentMetadata(null);
    
    try {
      console.log("Calling enhanced AI service for question:", query);
      const response = await enhancedAIService.answerQuestion(query, selectedSubject);
      
      console.log("Enhanced AI response received:", {
        hasAnswer: !!response.answer,
        confidence: response.confidence,
        relatedTopics: response.relatedTopics,
        followUpQuestions: response.followUpQuestions?.length || 0
      });
      
      setCurrentAnswer(response.answer);
      setCurrentMetadata({
        confidence: response.confidence,
        relatedTopics: response.relatedTopics,
        followUpQuestions: response.followUpQuestions
      });
      
      if (!response.error) {
        toast({
          title: "üéâ ‡§¨‡•á‡§π‡§§‡§∞‡•Ä‡§® ‡§â‡§§‡•ç‡§§‡§∞ ‡§§‡•à‡§Ø‡§æ‡§∞!",
          description: `${Math.round(response.confidence * 100)}% confidence ‡§ï‡•á ‡§∏‡§æ‡§• comprehensive answer‡•§`,
        });
      } else {
        console.log("Response has error:", response.error);
        toast({
          title: "‚ö†Ô∏è Technical Issue",
          description: "‡§ï‡•Å‡§õ ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•Å‡§à ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§¶‡•ã‡§¨‡§æ‡§∞‡§æ ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§",
          variant: "destructive",
        });
      }
    } catch (error) {
      console.error("Enhanced search error:", error);
      setCurrentAnswer("‡§ï‡•ç‡§∑‡§Æ‡§æ ‡§ï‡§∞‡•á‡§Ç, technical issue ‡§ï‡•á ‡§ï‡§æ‡§∞‡§£ ‡§Ü‡§™‡§ï‡§æ ‡§™‡•ç‡§∞‡§∂‡•ç‡§® process ‡§®‡§π‡•Ä‡§Ç ‡§π‡•ã ‡§∏‡§ï‡§æ‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§•‡•ã‡§°‡§º‡•Ä ‡§¶‡•á‡§∞ ‡§¨‡§æ‡§¶ ‡§¶‡•ã‡§¨‡§æ‡§∞‡§æ ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡§∞‡•á‡§Ç‡•§");
      toast({
        title: "‚ùå Error Occurred",
        description: "Enhanced AI service ‡§Æ‡•á‡§Ç temporary issue ‡§π‡•à‡•§",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleImageUpload = async (files: FileList) => {
    const fileNames = Array.from(files).map(f => f.name).join(", ");
    console.log("Enhanced handleImageUpload called:", fileNames);
    
    toast({
      title: "üì∏ Images Uploaded Successfully!",
      description: `Processing ${files.length} file(s) with enhanced AI...`,
    });
    
    setIsLoading(true);
    
    try {
      const imageAnalysisQuery = `‡§Æ‡•à‡§Ç‡§®‡•á ‡§Ø‡•á image files upload ‡§ï‡•Ä ‡§π‡•à‡§Ç: ${fileNames}‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ${selectedSubject} subject ‡§Æ‡•á‡§Ç ‡§á‡§® images ‡§ï‡•á ‡§∏‡§æ‡§• ‡§ï‡•à‡§∏‡•á ‡§Æ‡§¶‡§¶ ‡§Æ‡§ø‡§≤ ‡§∏‡§ï‡§§‡•Ä ‡§π‡•à, detailed guidance ‡§¶‡•á‡§Ç‡•§ ‡§∏‡§æ‡§• ‡§π‡•Ä ‡§¨‡§§‡§æ‡§è‡§Ç ‡§ï‡§ø image-based questions ‡§ï‡•à‡§∏‡•á ‡§™‡•Ç‡§õ‡•Ç‡§Ç‡•§`;
      
      const response = await enhancedAIService.answerQuestion(imageAnalysisQuery, selectedSubject);
      
      console.log("Enhanced image analysis response:", response);
      
      const enhancedImageResponse = `# üì∏ **Image Analysis - ${selectedSubject.toUpperCase()}**

**Uploaded Files:** ${fileNames}

${response.answer}

## **üí° Image-based Learning Tips:**
‚Ä¢ **Describe** ‡§ï‡§∞‡•á‡§Ç ‡§ï‡§ø image ‡§Æ‡•á‡§Ç ‡§ï‡•ç‡§Ø‡§æ ‡§¶‡§ø‡§ñ ‡§∞‡§π‡§æ ‡§π‡•à
‚Ä¢ **Specific questions** ‡§™‡•Ç‡§õ‡•á‡§Ç image content ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç  
‚Ä¢ **Step-by-step** explanation ‡§ö‡§æ‡§π‡§ø‡§è ‡§§‡•ã ‡§¨‡§§‡§æ‡§è‡§Ç
‚Ä¢ **Similar problems** solve ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç ‡§§‡•ã specify ‡§ï‡§∞‡•á‡§Ç

## **üéØ Next Steps:**
Image ‡§ï‡•Ä content ‡§ï‡•ã describe ‡§ï‡§∞‡•á‡§Ç ‡§Ø‡§æ specific questions ‡§™‡•Ç‡§õ‡•á‡§Ç‡•§ Enhanced AI ‡§Ü‡§™‡§ï‡•ã detailed help ‡§¶‡•á‡§ó‡§æ!`;

      setCurrentAnswer(enhancedImageResponse);
      setLastQuery(`Enhanced Image Analysis: ${fileNames}`);
      setCurrentMetadata(response);
      
    } catch (error) {
      console.error("Enhanced image upload error:", error);
      setCurrentAnswer(`# üì∏ **Files Successfully Uploaded**

**Files:** ${fileNames}

Enhanced AI system ‡§®‡•á ‡§Ü‡§™‡§ï‡•Ä files successfully receive ‡§ï‡•Ä ‡§π‡•à‡§Ç‡•§ 

## **üöÄ How to Get Best Help:**
1. **Describe** ‡§ï‡§∞‡•á‡§Ç ‡§ï‡§ø images ‡§Æ‡•á‡§Ç ‡§ï‡•ç‡§Ø‡§æ content ‡§π‡•à
2. **Specific questions** ‡§™‡•Ç‡§õ‡•á‡§Ç 
3. **Subject context** provide ‡§ï‡§∞‡•á‡§Ç
4. **Expected output** ‡§¨‡§§‡§æ‡§è‡§Ç

**Example:** "‡§á‡§∏ math problem ‡§ï‡•ã solve ‡§ï‡§∞‡•á‡§Ç" ‡§Ø‡§æ "‡§á‡§∏ diagram ‡§ï‡•ã explain ‡§ï‡§∞‡•á‡§Ç"

Enhanced AI ‡§Ü‡§™‡§ï‡•ã comprehensive ‡§î‡§∞ detailed help ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡•á‡§ó‡§æ!`);
    } finally {
      setIsLoading(false);
    }
  };

  const handleRegenerate = async () => {
    console.log("Enhanced handleRegenerate called:", lastQuery);
    if (lastQuery) {
      setIsLoading(true);
      
      try {
        const regenerationPrompt = `‡§ï‡•É‡§™‡§Ø‡§æ ‡§á‡§∏ ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§ï‡§æ ‡§è‡§ï ‡§Ö‡§≤‡§ó approach ‡§î‡§∞ more detailed explanation ‡§ï‡•á ‡§∏‡§æ‡§• answer ‡§¶‡•á‡§Ç: ${lastQuery}. ‡§™‡§ø‡§õ‡§≤‡•á response ‡§∏‡•á different perspective use ‡§ï‡§∞‡•á‡§Ç‡•§`;
        const response = await enhancedAIService.answerQuestion(regenerationPrompt, selectedSubject);
        
        console.log("Enhanced regenerated response received");
        setCurrentAnswer(response.answer);
        setCurrentMetadata(response);
        
        toast({
          title: "üîÑ ‡§®‡§Ø‡§æ Enhanced Answer!",
          description: "‡§Ü‡§™‡§ï‡•á ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§™‡§∞ fresh perspective ‡§ï‡•á ‡§∏‡§æ‡§• detailed response‡•§",
        });
      } catch (error) {
        console.error("Enhanced regeneration error:", error);
        toast({
          title: "‚ùå Regeneration Failed", 
          description: "Enhanced AI service ‡§Æ‡•á‡§Ç issue ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§¶‡•ã‡§¨‡§æ‡§∞‡§æ try ‡§ï‡§∞‡•á‡§Ç‡•§",
          variant: "destructive",
        });
      } finally {
        setIsLoading(false);
      }
    }
  };

  const handleFeedback = (type: 'helpful' | 'not-helpful') => {
    console.log("Enhanced handleFeedback called:", type);
    
    if (type === 'helpful') {
      toast({
        title: "üôè Thank You!",
        description: "‡§Ü‡§™‡§ï‡§æ positive feedback Enhanced AI ‡§ï‡•ã improve ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç help ‡§ï‡§∞‡§§‡§æ ‡§π‡•à!",
      });
    } else {
      toast({
        title: "üìù Feedback Noted",
        description: "‡§π‡§Æ ‡§Ü‡§™‡§ï‡•á feedback ‡§ï‡§æ use ‡§ï‡§∞‡§ï‡•á AI responses ‡§ï‡•ã ‡§î‡§∞ ‡§≠‡•Ä ‡§¨‡•á‡§π‡§§‡§∞ ‡§¨‡§®‡§æ‡§è‡§Ç‡§ó‡•á‡•§",
      });
    }
  };

  // Smooth scroll to top function
  const scrollToTop = () => {
    window.scrollTo({
      top: 0,
      behavior: 'smooth'
    });
  };

  return (
    <div className="min-h-screen">
      <Header />
      <SubjectTabs 
        selectedSubject={selectedSubject} 
        onSubjectSelect={setSelectedSubject} 
      />
      
      {/* Enhanced AI Status */}
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
        <div className="flex items-center justify-center space-x-3 text-sm bg-gradient-to-r from-green-50 to-blue-50 border border-green-200 rounded-lg p-3 animate-fade-in">
          <span className="text-2xl">üöÄ</span>
          <div className="text-center">
            <div className="font-semibold text-green-700">Enhanced AI System Active</div>
            <div className="text-green-600">Advanced reasoning ‚Ä¢ Comprehensive answers ‚Ä¢ Multi-language support</div>
          </div>
        </div>
      </div>
      
      <div id="search-area">
        <SearchArea 
          selectedSubject={selectedSubject}
          onSearch={handleSearch}
          onImageUpload={handleImageUpload}
        />
      </div>
      
      <AnswerDisplay 
        answer={currentAnswer}
        isLoading={isLoading}
        onRegenerate={handleRegenerate}
        onFeedback={handleFeedback}
        metadata={currentMetadata}
      />
      
      {/* Smooth Scroll to Top Button */}
      <button
        onClick={scrollToTop}
        className="fixed bottom-6 right-6 bg-primary text-primary-foreground p-3 rounded-full shadow-lg hover:scale-110 transition-all duration-300 z-50 animate-bounce"
        aria-label="Scroll to top"
      >
        ‚¨ÜÔ∏è
      </button>
      
      <Footer />
    </div>
  );
};

export default Index;
