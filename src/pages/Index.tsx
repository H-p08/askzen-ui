
import { useState } from "react";
import Header from "@/components/Header";
import SubjectTabs from "@/components/SubjectTabs";
import SearchArea from "@/components/SearchArea";
import AnswerDisplay from "@/components/AnswerDisplay";
import Footer from "@/components/Footer";
import { useToast } from "@/hooks/use-toast";
import { aiService } from "@/services/aiService";

const Index = () => {
  const [selectedSubject, setSelectedSubject] = useState("math");
  const [currentAnswer, setCurrentAnswer] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [lastQuery, setLastQuery] = useState<string>("");
  const { toast } = useToast();

  console.log("Index component rendered with:", {
    selectedSubject,
    currentAnswer: currentAnswer ? `${currentAnswer.substring(0, 50)}...` : null,
    isLoading
  });

  const handleSearch = async (query: string) => {
    console.log("handleSearch called with query:", query);
    
    setIsLoading(true);
    setLastQuery(query);
    setCurrentAnswer(null); // Clear previous answer
    
    try {
      console.log("Calling offline AI service for question:", query);
      const response = await aiService.answerQuestion(query, selectedSubject);
      
      console.log("AI response received:", {
        hasAnswer: !!response.answer,
        hasError: !!response.error,
        answerLength: response.answer?.length || 0
      });
      
      setCurrentAnswer(response.answer);
      
      if (!response.error) {
        toast({
          title: "‡§â‡§§‡•ç‡§§‡§∞ ‡§§‡•à‡§Ø‡§æ‡§∞!",
          description: "‡§Ü‡§™‡§ï‡§æ intelligent ‡§â‡§§‡•ç‡§§‡§∞ ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§π‡•à‡•§",
        });
      } else {
        console.log("Response has error:", response.error);
        toast({
          title: "Error",
          description: "‡§ï‡•Å‡§õ technical issue ‡§π‡•Å‡§Ü ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§¶‡•ã‡§¨‡§æ‡§∞‡§æ ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡§∞‡•á‡§Ç‡•§",
          variant: "destructive",
        });
      }
    } catch (error) {
      console.error("Search error:", error);
      setCurrentAnswer("‡§ï‡•ç‡§∑‡§Æ‡§æ ‡§ï‡§∞‡•á‡§Ç, ‡§Ü‡§™‡§ï‡•á ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§ï‡•ã process ‡§ï‡§∞‡§§‡•á ‡§∏‡§Æ‡§Ø error ‡§Ü‡§Ø‡§æ‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§¶‡•ã‡§¨‡§æ‡§∞‡§æ ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡§∞‡•á‡§Ç‡•§");
      toast({
        title: "Error",
        description: "Response generate ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç failed‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§¶‡•ã‡§¨‡§æ‡§∞‡§æ try ‡§ï‡§∞‡•á‡§Ç‡•§",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleImageUpload = async (files: FileList) => {
    const fileNames = Array.from(files).map(f => f.name).join(", ");
    console.log("handleImageUpload called with files:", fileNames);
    
    toast({
      title: "Images uploaded!",
      description: `Processing: ${fileNames}`,
    });
    
    setIsLoading(true);
    
    try {
      // Image analysis with offline AI
      const imageAnalysisQuery = `I have uploaded image files: ${fileNames}. Please provide guidance on what academic help I can get for image-based questions in ${selectedSubject}.`;
      
      const response = await aiService.answerQuestion(imageAnalysisQuery, selectedSubject);
      
      console.log("Image analysis response:", response);
      setCurrentAnswer(`**Uploaded Files:** ${fileNames}\n\n${response.answer}\n\n**Note:** ‡§™‡•Ç‡§∞‡•Ä image analysis ‡§ï‡•á ‡§≤‡§ø‡§è, ‡§ï‡•É‡§™‡§Ø‡§æ image ‡§Æ‡•á‡§Ç ‡§¶‡§ø‡§ñ‡§æ‡§à ‡§ó‡§à content ‡§ï‡•ã text ‡§Æ‡•á‡§Ç describe ‡§ï‡§∞‡•á‡§Ç, ‡§§‡•ã ‡§Æ‡•à‡§Ç detailed help ‡§¶‡•á ‡§∏‡§ï‡•Ç‡§Ç‡§ó‡§æ‡•§`);
      setLastQuery(`Image analysis: ${fileNames}`);
      
    } catch (error) {
      console.error("Image upload error:", error);
      setCurrentAnswer(`**Uploaded Files:** ${fileNames}\n\n‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä uploaded files ‡§¶‡•á‡§ñ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ image ‡§Æ‡•á‡§Ç ‡§ú‡•ã content ‡§π‡•à ‡§â‡§∏‡•á describe ‡§ï‡§∞‡•á‡§Ç ‡§Ø‡§æ specific questions ‡§™‡•Ç‡§õ‡•á‡§Ç, ‡§§‡•ã ‡§Æ‡•à‡§Ç detailed help ‡§¶‡•Ç‡§Ç‡§ó‡§æ‡•§\n\n**‡§â‡§¶‡§æ‡§π‡§∞‡§£:** "‡§á‡§∏ math problem ‡§ï‡•ã solve ‡§ï‡§∞‡•á‡§Ç" ‡§Ø‡§æ "‡§á‡§∏ diagram ‡§ï‡•ã explain ‡§ï‡§∞‡•á‡§Ç"`);
    } finally {
      setIsLoading(false);
    }
  };

  const handleRegenerate = async () => {
    console.log("handleRegenerate called with lastQuery:", lastQuery);
    if (lastQuery) {
      setIsLoading(true);
      
      try {
        const regenerationPrompt = `‡§ï‡•É‡§™‡§Ø‡§æ ‡§á‡§∏ ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§ï‡§æ ‡§è‡§ï alternative explanation ‡§Ø‡§æ different approach ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡•á‡§Ç: ${lastQuery}`;
        const response = await aiService.answerQuestion(regenerationPrompt, selectedSubject);
        
        console.log("Regenerated response received");
        setCurrentAnswer(response.answer);
        
        toast({
          title: "‡§®‡§Ø‡§æ ‡§â‡§§‡•ç‡§§‡§∞ ‡§§‡•à‡§Ø‡§æ‡§∞!",
          description: "‡§Ø‡§π‡§æ‡§Å ‡§Ü‡§™‡§ï‡•á ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§™‡§∞ ‡§è‡§ï ‡§®‡§Ø‡§æ perspective ‡§π‡•à‡•§",
        });
      } catch (error) {
        console.error("Regeneration error:", error);
        toast({
          title: "Error", 
          description: "Answer regenerate ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç failed‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§¶‡•ã‡§¨‡§æ‡§∞‡§æ try ‡§ï‡§∞‡•á‡§Ç‡•§",
          variant: "destructive",
        });
      } finally {
        setIsLoading(false);
      }
    }
  };

  const handleFeedback = (type: 'helpful' | 'not-helpful') => {
    console.log("handleFeedback called with type:", type);
    toast({
      title: type === 'helpful' ? "‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶!" : "Feedback ‡§Æ‡§ø‡§≤‡§æ",
      description: type === 'helpful' 
        ? "‡§π‡§Æ‡•á‡§Ç ‡§ñ‡•Å‡§∂‡•Ä ‡§π‡•à ‡§ï‡§ø ‡§â‡§§‡•ç‡§§‡§∞ helpful ‡§•‡§æ!" 
        : "‡§π‡§Æ ‡§Ü‡§™‡§ï‡•á feedback ‡§ï‡§æ use ‡§ï‡§∞‡§ï‡•á responses improve ‡§ï‡§∞‡•á‡§Ç‡§ó‡•á‡•§",
    });
  };

  return (
    <div className="min-h-screen">
      <Header />
      <SubjectTabs 
        selectedSubject={selectedSubject} 
        onSubjectSelect={setSelectedSubject} 
      />
      
      {/* Welcome message for no API key needed */}
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
        <div className="flex items-center justify-center space-x-2 text-sm text-green-600 bg-green-50 rounded-lg p-3">
          <span className="text-lg">ü§ñ</span>
          <span>Offline AI Ready - ‡§ï‡•ã‡§à API key ‡§ï‡•Ä ‡§ú‡§∞‡•Ç‡§∞‡§§ ‡§®‡§π‡•Ä‡§Ç! ‡§ï‡§ø‡§∏‡•Ä ‡§≠‡•Ä ‡§µ‡§ø‡§∑‡§Ø ‡§™‡§∞ ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§™‡•Ç‡§õ‡•á‡§Ç‡•§</span>
        </div>
      </div>
      
      <SearchArea 
        selectedSubject={selectedSubject}
        onSearch={handleSearch}
        onImageUpload={handleImageUpload}
      />
      
      <AnswerDisplay 
        answer={currentAnswer}
        isLoading={isLoading}
        onRegenerate={handleRegenerate}
        onFeedback={handleFeedback}
      />
      
      <Footer />
    </div>
  );
};

export default Index;
